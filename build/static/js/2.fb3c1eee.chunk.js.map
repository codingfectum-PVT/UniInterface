{"version":3,"sources":["nft/hooks/useBag.ts","nft/hooks/useFiltersExpanded.ts","nft/hooks/useIsMobile.ts","nft/hooks/useMarketplaceSelect.ts","nft/hooks/useNFTList.ts","nft/hooks/useProfilePageState.ts","nft/hooks/useNFTSelect.ts","nft/hooks/useSearchHistory.ts","nft/hooks/useSelectAsset.ts","nft/hooks/useSellAsset.ts","nft/hooks/useSendTransaction.ts","nft/hooks/useTransactionResponse.ts","nft/hooks/useSweep.ts","nft/hooks/useWalletBalance.ts","nft/hooks/useWalletCollections.ts","nft/utils/roundAndPluralize.ts","nft/utils/timeSince.ts","nft/utils/transactionResponse.ts","nft/hooks/useCollectionFilters.ts","nft/utils/fetchPrice.ts","nft/utils/x2y2.ts","nft/utils/listNfts.ts","nft/hooks/useIsCollectionLoading.ts","nft/utils/calcPoolPrice.ts","nft/utils/rarity.ts","nft/utils/asset.ts","nft/utils/buildActivityAsset.ts","nft/utils/buildSellObject.ts","nft/utils/isAudio.ts","nft/utils/isVideo.ts","nft/utils/updatedAssets.ts","nft/utils/txRoute/combineItemsWithTxRoute.ts"],"names":["useBag","create","devtools","set","get","bagStatus","BagStatus","ADDING_TO_BAG","setBagStatus","newBagStatus","markAssetAsReviewed","asset","toKeep","itemsInBag","length","itemsInBagCopy","index","findIndex","item","id","status","BagItemStatus","REVIEWED","splice","didOpenUnavailableAssets","setDidOpenUnavailableAssets","didOpen","bagExpanded","toggleBag","isLocked","setLocked","_isLocked","setItemsInBag","items","totalEthPrice","BigNumber","from","setTotalEthPrice","totalUsdPrice","undefined","setTotalUsdPrice","addAssetToBag","assetWithId","uuidv4","ADDED_TO_BAG","removeAssetFromBag","itemsCopy","n","tokenId","address","reset","name","useFiltersExpandedStore","persist","isExpanded","setExpanded","expanded","useFiltersExpanded","s","isClient","window","getIsMobile","innerWidth","breakpoints","sm","useIsMobile","useState","isMobile","setIsMobile","useEffect","handleResize","addEventListener","removeEventListener","options","select","option","find","o","filter","x","useNFTList","looksRareNonce","listingStatus","ListingStatus","DEFINED","listings","collectionsRequiringApproval","setLooksRareNonce","nonce","getLooksRareNonce","setListingStatus","setListings","setCollectionsRequiringApproval","collections","useProfilePageState","selectedNFTs","isUniversalPrice","selectNFT","nft","toggleUniversalPrice","v","setUniversalPrice","price","map","setSingleNFTPrice","found","i","state","ProfilePageStateType","VIEWING","setProfilePageState","newState","history","addItem","historyCopy","unshift","updateItem","update","selectedAssets","selectAsset","removeAsset","assetsCopy","useSellAsset","sellAssets","selectSellAsset","removeSellAsset","setGlobalExpiration","expirationTime","setAssetListPrice","marketplace","listingIndex","newListings","listing","overrideFloorPrice","marketAgnosticPrice","push","setGlobalMarketplaces","marketplaces","newListing","removeAssetMarketplace","assetIndex","indexOf","marketplaceIndex","oldMarket","assetCopy","JSON","parse","stringify","addMarketplaceWarning","warning","listingWarnings","removeMarketplaceWarning","setGlobalOverride","warningIndex","message","includes","forEach","removeAllMarketplaceWarnings","useSendTransaction","TxStateType","New","txHash","clearTxHash","setState","sendTransaction","signer","transactionData","a","getAddress","txNoGasLimit","to","value","valueToSend","data","estimateGas","gasLimit","mul","div","tx","Signing","res","Confirming","hash","wait","txReceipt","nftsPurchased","findNFTsPurchased","route","nftsNotPurchased","findNFTsNotPurchased","Success","Failed","console","log","code","Denied","Invalid","signerAddress","toBuy","txRoute","logs","erc721Interface","Interface","ERC721","erc1155Interface","ERC1155","cryptopunksMarketInterface","CryptoPunksMarket","transferredErc721","topics","getEventTopic","hexStripZeros","toLowerCase","parseInt","toString","transferredErc1155","parseLog","args","transferredCryptopunks","allTransferred","transferredItems","assetToBuy","some","purchasedNft","combineBuyItemsWithTxRoute","selectedAsset","useTransactionResponse","sweepAssets","setSweepAssets","assets","removeSweepAsset","transactionResponse","setTransactionResponse","txResponse","useWalletBalance","useWeb3React","account","provider","balanceString","useNativeCurrencyBalances","toSignificant","balance","weiBalance","parseEther","useWalletCollections","walletAssets","walletCollections","displayAssets","collectionFilters","listFilter","setWalletAssets","asset_contract","schema_name","setWalletCollections","setCollectionFilters","clearCollectionFilters","setListFilter","setDisplayAssets","filterWalletAssets","listing_date","roundAndPluralize","word","rounded","Math","floor","pluralize","number","HOUR","MINUTE","DAY","timeLeft","targetDate","countDown","Date","getTime","days","hours","minutes","shortenTxHash","charsToShorten","addCharsToBack","substring","parseTransactionResponse","ethPrice","showPurchasedModal","showRefundModal","totalPurchaseValue","totalRefundValue","totalUSDRefund","txFeeFiat","purchasedNfts","notPurchasedNfts","getTotalNftValue","parseFloat","formatEther","txFee","gasUsed","effectiveGasPrice","getSuccessfulImageSize","numSuccessful","sizeModifier","SortBy","SortByPointers","HighToLow","LowToHigh","RareToCommon","CommonToRare","initialCollectionFilterState","minPrice","maxPrice","minRarity","maxRarity","traits","markets","marketCount","buyNow","search","sortBy","showFullTraitName","shouldShow","trait_value","trait_type","useCollectionFilters","setSortBy","setSearch","setBuyNow","setMarketCount","addMarket","market","removeMarket","_market","addTrait","trait","removeTrait","setMinPrice","setMaxPrice","setMinRarity","range","setMaxRarity","toggleShowFullTraitName","Currency","fetchPrice","currency","ETH","fetch","response","json","then","j","rates","USD","error","orderItemParamType","orderParamTypes","orderParamType","signOrderData","web3Provider","order","orderData","defaultAbiCoder","encode","salt","user","network","intent","delegateType","deadline","dataMask","orderHash","keccak256","send","orderSig","r","slice","fixSignature","encodeOrder","createSellOrder","randomHex","randomBytes","toHexString","hexZeroPad","randomSalt","AddressZero","tokens","signVersion","ListingMarkets","fee","icon","createConsiderationItem","basisPoints","recipient","amount","getConsiderationItems","openSeaBasisPoints","OPENSEA_DEFAULT_FEE","INVERSE_BASIS_POINTS","creatorFeeBasisPoints","creatorPercentage","sellerBasisPoints","openseaFee","creatorFee","sellerFee","OPENSEA_FEE_ADDRESS","payout_address","approveCollection","operator","collectionAddress","setStatus","ERC721Contract","Contract","PENDING","isApprovedForAll","APPROVED","SIGNING","setApprovalForAll","approvalTransaction","FAILED","REJECTED","signListing","seaport","Seaport","conduitKeyToConduit","OPENSEA_KEY_TO_CONDUIT","overrides","defaultConduitKey","OPENSEA_DEFAULT_CROSS_CHAIN_CONDUIT_KEY","listingPrice","listingInWei","considerationItems","createOrder","offer","itemType","ItemType","token","identifier","consideration","endTime","zone","OPENSEA_DEFAULT_ZONE","restrictedByZone","allowPartialFills","executeAllActions","PostOpenSeaSellOrder","OPENSEA_LISTINGS_API_PATH","addresses","addressesByNetwork","SupportedChainId","MAINNET","currentTime","round","now","makerOrder","isOrderAsk","collection","strategy","STRATEGY_STANDARD_SALE","WETH","startTime","minPercentageToAsk","sub","add","toNumber","params","signMakerOrder","process","REACT_APP_LOOKSRARE_MARKETPLACE_CONTRACT","signatureHash","payload","signature","createLooksRareOrder","orderItem","isBundle","bundleName","bundleDesc","orderIds","changePrice","isCollection","newX2Y2Order","resp","useIsCollectionLoading","isCollectionNftsLoading","setIsCollectionNftsLoading","isCollectionStatsLoading","setIsCollectionStatsLoading","calcPoolPrice","position","amountToBuy","marginalBuy","sellorders","decimals","pow","ammFee","ammFeePercent","Markets","NFTX","sixteenmul","NFT20","ethReserves","toLocaleString","useGrouping","tokenReserves","numerator","denominator","marginalnumerator","marginaldenominator","marginalprice","recalculateBagUsingPooledAssets","uncheckedItemsInBag","every","REVIEWING_PRICE_CHANGE","isPooledMarket","possibleMarkets","reduce","key","Object","keys","updatedPriceMarkets","updatedPriceInfo","calculatedAvgPoolPrices","prices","numberOfAssets","total","calcAvgGroupPoolPrice","isPriceChangedAsset","calculatedPrice","ETHPrice","basePrice","currentEthPrice","priceInfo","fallbackProvider","fallbackProviderLogo","rarityProviderLogo","Genie","getRarityProviderLogo","source","getRarityStatus","rarityStatusCache","has","hasRarity","Array","reducer","rarity","getAssetHref","origin","getMarketplaceIcon","buildActivityAsset","event","collectionName","ethPriceInUSD","assetUsdPrice","trunc","imageUrl","tokenMetadata","openseaSusFlag","suspiciousFlag","smallImageUrl","collectionSymbol","symbol","currentUsdPrice","USDPrice","baseAsset","tokenType","standard","buildSellObject","Set","isAudio","file","fileType","lastIndexOf","isVideo","path","extensions","ext","endsWith","updatedAssetPriceDifference","sortUpdatedAssets","y","gt","nfts","ethTotal","action","routeAsset","isTheSame","assetOut","isUnavailable","oldPrice","newPrice","newPriceInfo","formatWeiToDecimal","orderSource"],"mappings":"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","file":"static/js/2.fb3c1eee.chunk.js","sourcesContent":["import { BigNumber } from '@ethersproject/bignumber'\r\nimport { BagItem, BagItemStatus, BagStatus, UpdatedGenieAsset } from 'nft/types'\r\nimport { v4 as uuidv4 } from 'uuid'\r\nimport create from 'zustand'\r\nimport { devtools } from 'zustand/middleware'\r\n\r\ninterface BagState {\r\n  bagStatus: BagStatus\r\n  setBagStatus: (state: BagStatus) => void\r\n  itemsInBag: BagItem[]\r\n  setItemsInBag: (items: BagItem[]) => void\r\n  totalEthPrice: BigNumber\r\n  setTotalEthPrice: (totalEthPrice: BigNumber) => void\r\n  totalUsdPrice: number | undefined\r\n  setTotalUsdPrice: (totalUsdPrice: number | undefined) => void\r\n  addAssetToBag: (asset: UpdatedGenieAsset) => void\r\n  removeAssetFromBag: (asset: UpdatedGenieAsset) => void\r\n  markAssetAsReviewed: (asset: UpdatedGenieAsset, toKeep: boolean) => void\r\n  didOpenUnavailableAssets: boolean\r\n  setDidOpenUnavailableAssets: (didOpen: boolean) => void\r\n  bagExpanded: boolean\r\n  toggleBag: () => void\r\n  isLocked: boolean\r\n  setLocked: (isLocked: boolean) => void\r\n  reset: () => void\r\n}\r\n\r\nexport const useBag = create<BagState>()(\r\n  devtools(\r\n    (set, get) => ({\r\n      bagStatus: BagStatus.ADDING_TO_BAG,\r\n      setBagStatus: (newBagStatus) =>\r\n        set(() => ({\r\n          bagStatus: newBagStatus,\r\n        })),\r\n      markAssetAsReviewed: (asset, toKeep) =>\r\n        set(({ itemsInBag }) => {\r\n          if (itemsInBag.length === 0) return { itemsInBag: [] }\r\n          const itemsInBagCopy = [...itemsInBag]\r\n          const index = itemsInBagCopy.findIndex((item) => item.asset.id === asset.id)\r\n          if (!toKeep && index !== -1) itemsInBagCopy.splice(index, 1)\r\n          else if (index !== -1) {\r\n            itemsInBagCopy[index].status = BagItemStatus.REVIEWED\r\n          }\r\n          return {\r\n            itemsInBag: itemsInBagCopy,\r\n          }\r\n        }),\r\n      didOpenUnavailableAssets: false,\r\n      setDidOpenUnavailableAssets: (didOpen) =>\r\n        set(() => ({\r\n          didOpenUnavailableAssets: didOpen,\r\n        })),\r\n      bagExpanded: false,\r\n      toggleBag: () =>\r\n        set(({ bagExpanded }) => ({\r\n          bagExpanded: !bagExpanded,\r\n        })),\r\n      isLocked: false,\r\n      setLocked: (_isLocked) =>\r\n        set(() => ({\r\n          isLocked: _isLocked,\r\n        })),\r\n      itemsInBag: [],\r\n      setItemsInBag: (items) =>\r\n        set(() => ({\r\n          itemsInBag: items,\r\n        })),\r\n      totalEthPrice: BigNumber.from(0),\r\n      setTotalEthPrice: (totalEthPrice) =>\r\n        set(() => ({\r\n          totalEthPrice,\r\n        })),\r\n      totalUsdPrice: undefined,\r\n      setTotalUsdPrice: (totalUsdPrice) =>\r\n        set(() => ({\r\n          totalUsdPrice,\r\n        })),\r\n      addAssetToBag: (asset) =>\r\n        set(({ itemsInBag }) => {\r\n          if (get().isLocked) return { itemsInBag: get().itemsInBag }\r\n          const assetWithId = { asset: { id: uuidv4(), ...asset }, status: BagItemStatus.ADDED_TO_BAG }\r\n          if (itemsInBag.length === 0)\r\n            return {\r\n              itemsInBag: [assetWithId],\r\n              bagStatus: BagStatus.ADDING_TO_BAG,\r\n            }\r\n          else\r\n            return {\r\n              itemsInBag: [...itemsInBag, assetWithId],\r\n              bagStatus: BagStatus.ADDING_TO_BAG,\r\n            }\r\n        }),\r\n      removeAssetFromBag: (asset) => {\r\n        set(({ itemsInBag }) => {\r\n          if (get().isLocked) return { itemsInBag: get().itemsInBag }\r\n          if (itemsInBag.length === 0) return { itemsInBag: [] }\r\n          const itemsCopy = [...itemsInBag]\r\n          const index = itemsCopy.findIndex((n) =>\r\n            asset.id ? n.asset.id === asset.id : n.asset.tokenId === asset.tokenId && n.asset.address === asset.address\r\n          )\r\n          if (index === -1) return { itemsInBag: get().itemsInBag }\r\n          itemsCopy.splice(index, 1)\r\n          return { itemsInBag: itemsCopy }\r\n        })\r\n      },\r\n      reset: () =>\r\n        set(() => {\r\n          if (!get().isLocked)\r\n            return {\r\n              bagStatus: BagStatus.ADDING_TO_BAG,\r\n              itemsInBag: [],\r\n              didOpenUnavailableAssets: false,\r\n              isLocked: false,\r\n            }\r\n          else return {}\r\n        }),\r\n    }),\r\n    { name: 'useBag' }\r\n  )\r\n)\r\n","import create from 'zustand'\r\nimport { devtools, persist } from 'zustand/middleware'\r\n\r\ninterface State {\r\n  isExpanded: boolean\r\n  setExpanded: (expanded: boolean) => void\r\n}\r\n\r\nconst useFiltersExpandedStore = create<State>()(\r\n  persist(\r\n    devtools(\r\n      (set) => ({\r\n        isExpanded: false,\r\n        setExpanded: (expanded) =>\r\n          set(() => ({\r\n            isExpanded: expanded,\r\n          })),\r\n      }),\r\n      { name: 'useFiltersExpanded' }\r\n    ),\r\n    { name: 'useFiltersExpanded' }\r\n  )\r\n)\r\n\r\nexport const useFiltersExpanded = (): [boolean, (expanded: boolean) => void] => {\r\n  const isExpanded = useFiltersExpandedStore((s) => s.isExpanded)\r\n  const setExpanded = useFiltersExpandedStore((s) => s.setExpanded)\r\n\r\n  return [isExpanded, setExpanded]\r\n}\r\n","import { breakpoints } from 'nft/css/sprinkles.css'\r\nimport { useEffect, useState } from 'react'\r\n\r\nconst isClient = typeof window !== 'undefined'\r\n\r\nfunction getIsMobile() {\r\n  return isClient ? window.innerWidth < breakpoints.sm : false\r\n}\r\n\r\nexport function useIsMobile(): boolean {\r\n  const [isMobile, setIsMobile] = useState(getIsMobile)\r\n\r\n  useEffect(() => {\r\n    function handleResize() {\r\n      setIsMobile(getIsMobile())\r\n    }\r\n\r\n    if (isClient) {\r\n      window.addEventListener('resize', handleResize)\r\n      return () => {\r\n        window.removeEventListener('resize', handleResize)\r\n      }\r\n    }\r\n    return undefined\r\n  }, [])\r\n\r\n  return isMobile\r\n}\r\n","import create from 'zustand'\r\nimport { devtools } from 'zustand/middleware'\r\n\r\nexport type MarketplaceOption = { name: string; icon: string }\r\n\r\ninterface State {\r\n  options: MarketplaceOption[]\r\n  select: (o: MarketplaceOption) => void\r\n}\r\n\r\nexport const useMarketplaceSelect = create<State>()(\r\n  devtools(\r\n    (set) => ({\r\n      options: [],\r\n      select: (option) =>\r\n        set(({ options }) => {\r\n          if (options.find((o) => option.name === o.name))\r\n            return { options: options.filter((x) => x.name !== option.name) }\r\n          else return { options: [...options, option] }\r\n        }),\r\n    }),\r\n    { name: 'useMarketplaceSelect' }\r\n  )\r\n)\r\n","import { CollectionRow, ListingRow, ListingStatus } from 'nft/types'\r\nimport create from 'zustand'\r\nimport { devtools } from 'zustand/middleware'\r\n\r\ninterface NFTListState {\r\n  looksRareNonce: number\r\n  listingStatus: ListingStatus\r\n  listings: ListingRow[]\r\n  collectionsRequiringApproval: CollectionRow[]\r\n  setLooksRareNonce: (nonce: number) => void\r\n  getLooksRareNonce: () => number\r\n  setListingStatus: (status: ListingStatus) => void\r\n  setListings: (listings: ListingRow[]) => void\r\n  setCollectionsRequiringApproval: (collections: CollectionRow[]) => void\r\n}\r\n\r\nexport const useNFTList = create<NFTListState>()(\r\n  devtools((set, get) => ({\r\n    looksRareNonce: 0,\r\n    listingStatus: ListingStatus.DEFINED,\r\n    listings: [],\r\n    collectionsRequiringApproval: [],\r\n    setLooksRareNonce: (nonce) =>\r\n      set(() => {\r\n        return { looksRareNonce: nonce }\r\n      }),\r\n    getLooksRareNonce: () => {\r\n      return get().looksRareNonce\r\n    },\r\n    setListingStatus: (status) =>\r\n      set(() => {\r\n        return { listingStatus: status }\r\n      }),\r\n    setListings: (listings) =>\r\n      set(() => {\r\n        return { listings }\r\n      }),\r\n    setCollectionsRequiringApproval: (collections) =>\r\n      set(() => {\r\n        return { collectionsRequiringApproval: collections }\r\n      }),\r\n  }))\r\n)\r\n","import create from 'zustand'\r\nimport { devtools } from 'zustand/middleware'\r\n\r\nimport { ProfilePageStateType } from '../types'\r\n\r\ninterface profilePageState {\r\n  /**\r\n   * State of user settings\r\n   */\r\n  state: ProfilePageStateType\r\n  setProfilePageState: (state: ProfilePageStateType) => void\r\n}\r\n\r\nexport const useProfilePageState = create<profilePageState>()(\r\n  devtools(\r\n    (set) => ({\r\n      state: ProfilePageStateType.VIEWING,\r\n      setProfilePageState: (newState) =>\r\n        set(() => ({\r\n          state: newState,\r\n        })),\r\n    }),\r\n    { name: 'useProfilePageState' }\r\n  )\r\n)\r\n","import create from 'zustand'\r\nimport { devtools } from 'zustand/middleware'\r\n\r\nimport { OpenSeaAsset } from '../types'\r\n\r\ninterface SelectNFTState {\r\n  /**\r\n   * NFTs selected by a user\r\n   */\r\n  selectedNFTs: (OpenSeaAsset & { price?: number })[]\r\n\r\n  selectNFT: (nft: OpenSeaAsset & { price?: number }) => void\r\n  reset: () => void\r\n  setUniversalPrice: (price: number) => void\r\n  toggleUniversalPrice: (v: boolean) => void\r\n  setSingleNFTPrice: (id: number, price: number) => void\r\n  isUniversalPrice: boolean\r\n}\r\n\r\nexport const useNFTSelect = create<SelectNFTState>()(\r\n  devtools(\r\n    (set) => ({\r\n      selectedNFTs: [],\r\n      isUniversalPrice: false,\r\n      selectNFT: (nft) =>\r\n        set(({ selectedNFTs }) => {\r\n          if (selectedNFTs.length === 0) return { selectedNFTs: [nft] }\r\n          else if (!!selectedNFTs.find((x) => x.id === nft.id))\r\n            return { selectedNFTs: selectedNFTs.filter((n) => n.id !== nft.id) }\r\n          else return { selectedNFTs: [...selectedNFTs, nft] }\r\n        }),\r\n      reset: () => set(() => ({ selectedNFTs: [] })),\r\n      toggleUniversalPrice: (v) => set(() => ({ isUniversalPrice: v })),\r\n      setUniversalPrice: (price) =>\r\n        set(({ selectedNFTs }) => {\r\n          return {\r\n            selectedNFTs: selectedNFTs.map((n) => ({ ...n, price })),\r\n            isUniversalPrice: true,\r\n          }\r\n        }),\r\n      setSingleNFTPrice: (id, price) =>\r\n        set(({ selectedNFTs }) => {\r\n          const found = selectedNFTs.find((i) => i.id === id)\r\n\r\n          return {\r\n            selectedNFTs: [...selectedNFTs.filter((n) => n.id !== id), { ...found, price }],\r\n          }\r\n        }),\r\n    }),\r\n    { name: 'useNFTSelect' }\r\n  )\r\n)\r\n","import { FungibleToken, GenieCollection } from 'nft/types'\r\nimport create from 'zustand'\r\nimport { devtools, persist } from 'zustand/middleware'\r\n\r\ninterface SearchHistoryProps {\r\n  history: (FungibleToken | GenieCollection)[]\r\n  addItem: (item: FungibleToken | GenieCollection) => void\r\n  updateItem: (update: FungibleToken | GenieCollection) => void\r\n}\r\n\r\nexport const useSearchHistory = create<SearchHistoryProps>()(\r\n  persist(\r\n    devtools((set) => ({\r\n      history: [],\r\n      addItem: (item: FungibleToken | GenieCollection) => {\r\n        set(({ history }) => {\r\n          const historyCopy = [...history]\r\n          if (historyCopy.length === 0 || historyCopy[0].address !== item.address) historyCopy.unshift(item)\r\n          return { history: historyCopy }\r\n        })\r\n      },\r\n      updateItem: (update: FungibleToken | GenieCollection) => {\r\n        set(({ history }) => {\r\n          const index = history.findIndex((item) => item.address === update.address)\r\n          if (index === -1) return { history }\r\n\r\n          const historyCopy = [...history]\r\n          historyCopy[index] = update\r\n          return { history: historyCopy }\r\n        })\r\n      },\r\n    })),\r\n    { name: 'useSearchHistory' }\r\n  )\r\n)\r\n","import { v4 as uuidv4 } from 'uuid'\r\nimport create from 'zustand'\r\nimport { devtools } from 'zustand/middleware'\r\n\r\nimport { GenieAsset } from '../types'\r\n\r\ninterface SelectAssetState {\r\n  selectedAssets: GenieAsset[]\r\n  selectAsset: (asset: GenieAsset) => void\r\n  removeAsset: (asset: GenieAsset) => void\r\n  reset: () => void\r\n}\r\n\r\nexport const useSelectAsset = create<SelectAssetState>()(\r\n  devtools((set) => ({\r\n    selectedAssets: [],\r\n    selectAsset: (asset) =>\r\n      set(({ selectedAssets }) => {\r\n        const assetWithId = { id: uuidv4(), ...asset }\r\n        if (selectedAssets.length === 0) return { selectedAssets: [assetWithId] }\r\n        else return { selectedAssets: [...selectedAssets, assetWithId] }\r\n      }),\r\n    removeAsset: (asset) => {\r\n      set(({ selectedAssets }) => {\r\n        if (selectedAssets.length === 0) return { selectedAssets: [] }\r\n        else selectedAssets.find((x) => x.tokenId === asset.tokenId && x.address === asset.address)\r\n        const assetsCopy = [...selectedAssets]\r\n        assetsCopy.splice(\r\n          selectedAssets.findIndex((n) => n.tokenId === asset.tokenId && n.address === asset.address),\r\n          1\r\n        )\r\n        return { selectedAssets: assetsCopy }\r\n      })\r\n    },\r\n    reset: () => set(() => ({ selectedAssets: [] })),\r\n  }))\r\n)\r\n","import { v4 as uuidv4 } from 'uuid'\r\nimport create from 'zustand'\r\nimport { devtools } from 'zustand/middleware'\r\n\r\nimport { ListingMarket, ListingWarning, WalletAsset } from '../types'\r\n\r\ninterface SellAssetState {\r\n  sellAssets: WalletAsset[]\r\n  selectSellAsset: (asset: WalletAsset) => void\r\n  removeSellAsset: (asset: WalletAsset) => void\r\n  reset: () => void\r\n  setGlobalExpiration: (expirationTime: number) => void\r\n  setAssetListPrice: (asset: WalletAsset, price?: number, marketplace?: ListingMarket) => void\r\n  setGlobalMarketplaces: (marketplaces: ListingMarket[]) => void\r\n  removeAssetMarketplace: (asset: WalletAsset, marketplace: ListingMarket) => void\r\n  addMarketplaceWarning: (asset: WalletAsset, warning: ListingWarning) => void\r\n  removeMarketplaceWarning: (asset: WalletAsset, warning: ListingWarning, setGlobalOverride?: boolean) => void\r\n  removeAllMarketplaceWarnings: () => void\r\n}\r\n\r\nexport const useSellAsset = create<SellAssetState>()(\r\n  devtools(\r\n    (set) => ({\r\n      sellAssets: [],\r\n      selectSellAsset: (asset) =>\r\n        set(({ sellAssets }) => {\r\n          const assetWithId = { id: uuidv4(), ...asset }\r\n          if (sellAssets.length === 0) return { sellAssets: [assetWithId] }\r\n          else return { sellAssets: [...sellAssets, assetWithId] }\r\n        }),\r\n      removeSellAsset: (asset) => {\r\n        set(({ sellAssets }) => {\r\n          if (sellAssets.length === 0) return { sellAssets: [] }\r\n          else sellAssets.find((x) => x.id === asset.id)\r\n          const assetsCopy = [...sellAssets]\r\n          assetsCopy.splice(\r\n            sellAssets.findIndex((n) => n.id === asset.id),\r\n            1\r\n          )\r\n          return { sellAssets: assetsCopy }\r\n        })\r\n      },\r\n      reset: () => set(() => ({ sellAssets: [] })),\r\n      setGlobalExpiration: (expirationTime) => {\r\n        set(({ sellAssets }) => {\r\n          const assetsCopy = [...sellAssets]\r\n          assetsCopy.map((asset) => {\r\n            asset.expirationTime = expirationTime\r\n            return asset\r\n          })\r\n          return { sellAssets: assetsCopy }\r\n        })\r\n      },\r\n      setAssetListPrice: (asset, price, marketplace?) => {\r\n        set(({ sellAssets }) => {\r\n          const assetsCopy = [...sellAssets]\r\n          if (marketplace) {\r\n            const listingIndex = asset.newListings?.findIndex(\r\n              (listing) => listing.marketplace.name === marketplace.name\r\n            )\r\n            if (asset.newListings && listingIndex != null && listingIndex > -1) {\r\n              asset.newListings[listingIndex] = { price, marketplace, overrideFloorPrice: false }\r\n              if (listingIndex === 0) asset.marketAgnosticPrice = price\r\n            } else asset.newListings?.push({ price, marketplace, overrideFloorPrice: false })\r\n          } else asset.marketAgnosticPrice = price\r\n          const index = sellAssets.findIndex((n) => n.id === asset.id)\r\n          assetsCopy[index] = asset\r\n          return { sellAssets: assetsCopy }\r\n        })\r\n      },\r\n      setGlobalMarketplaces: (marketplaces) => {\r\n        set(({ sellAssets }) => {\r\n          const assetsCopy = [...sellAssets]\r\n          assetsCopy.map((asset) => {\r\n            asset.marketplaces = marketplaces\r\n            asset.newListings = []\r\n            for (const marketplace of marketplaces) {\r\n              const listingIndex = asset.newListings.findIndex(\r\n                (listing) => listing.marketplace.name === marketplace.name\r\n              )\r\n              const newListing = {\r\n                price: asset.marketAgnosticPrice,\r\n                marketplace,\r\n                overrideFloorPrice: false,\r\n              }\r\n              listingIndex > -1 ? (asset.newListings[listingIndex] = newListing) : asset.newListings.push(newListing)\r\n            }\r\n            return asset\r\n          })\r\n          return { sellAssets: assetsCopy }\r\n        })\r\n      },\r\n      removeAssetMarketplace: (asset, marketplace) => {\r\n        set(({ sellAssets }) => {\r\n          const assetsCopy = [...sellAssets]\r\n          const assetIndex = sellAssets.indexOf(asset)\r\n          const marketplaceIndex =\r\n            asset.marketplaces?.findIndex((oldMarket) => oldMarket.name === marketplace.name) ?? -1\r\n          const listingIndex = asset.newListings?.findIndex((listing) => listing.marketplace.name === marketplace.name)\r\n          const assetCopy = JSON.parse(JSON.stringify(asset))\r\n          if (marketplaceIndex > -1) {\r\n            assetCopy.marketplaces.splice(marketplaceIndex, 1)\r\n            assetCopy.newListings.splice(listingIndex, 1)\r\n          }\r\n          assetsCopy.splice(assetIndex, 1, assetCopy)\r\n          return { sellAssets: assetsCopy }\r\n        })\r\n      },\r\n      addMarketplaceWarning: (asset, warning) => {\r\n        set(({ sellAssets }) => {\r\n          const assetsCopy = [...sellAssets]\r\n          asset.listingWarnings?.push(warning)\r\n          const index = sellAssets.findIndex((n) => n.id === asset.id)\r\n          assetsCopy[index] = asset\r\n          return { sellAssets: assetsCopy }\r\n        })\r\n      },\r\n      removeMarketplaceWarning: (asset, warning, setGlobalOverride?) => {\r\n        set(({ sellAssets }) => {\r\n          const assetsCopy = [...sellAssets]\r\n          if (asset.listingWarnings === undefined || asset.newListings === undefined) return { sellAssets: assetsCopy }\r\n          const warningIndex =\r\n            asset.listingWarnings?.findIndex((n) => n.marketplace.name === warning.marketplace.name) ?? -1\r\n          asset.listingWarnings?.splice(warningIndex, 1)\r\n          if (warning?.message?.includes('LISTING BELOW FLOOR')) {\r\n            if (setGlobalOverride) {\r\n              asset.newListings?.forEach((listing) => (listing.overrideFloorPrice = true))\r\n            } else {\r\n              const listingIndex =\r\n                asset.newListings?.findIndex((n) => n.marketplace.name === warning.marketplace.name) ?? -1\r\n              asset.newListings[listingIndex].overrideFloorPrice = true\r\n            }\r\n          }\r\n          const index = sellAssets.findIndex((n) => n.id === asset.id)\r\n          assetsCopy[index] = asset\r\n          return { sellAssets: assetsCopy }\r\n        })\r\n      },\r\n      removeAllMarketplaceWarnings: () => {\r\n        set(({ sellAssets }) => {\r\n          const assetsCopy = [...sellAssets]\r\n          assetsCopy.map((asset) => (asset.listingWarnings = []))\r\n          return { sellAssets: assetsCopy }\r\n        })\r\n      },\r\n    }),\r\n    { name: 'useSelectAsset' }\r\n  )\r\n)\r\n","import { Interface } from '@ethersproject/abi'\r\nimport { BigNumber } from '@ethersproject/bignumber'\r\nimport { hexStripZeros } from '@ethersproject/bytes'\r\nimport { ContractReceipt } from '@ethersproject/contracts'\r\nimport type { JsonRpcSigner } from '@ethersproject/providers'\r\nimport create from 'zustand'\r\nimport { devtools } from 'zustand/middleware'\r\n\r\nimport ERC721 from '../../abis/erc721.json'\r\nimport ERC1155 from '../../abis/erc1155.json'\r\nimport CryptoPunksMarket from '../abis/CryptoPunksMarket.json'\r\nimport { GenieAsset, RouteResponse, RoutingItem, TxResponse, TxStateType, UpdatedGenieAsset } from '../types'\r\nimport { combineBuyItemsWithTxRoute } from '../utils/txRoute/combineItemsWithTxRoute'\r\n\r\ninterface TxState {\r\n  state: TxStateType\r\n  setState: (state: TxStateType) => void\r\n  txHash: string\r\n  clearTxHash: () => void\r\n  sendTransaction: (\r\n    signer: JsonRpcSigner,\r\n    selectedAssets: UpdatedGenieAsset[],\r\n    transactionData: RouteResponse\r\n  ) => Promise<TxResponse | undefined>\r\n}\r\n\r\nexport const useSendTransaction = create<TxState>()(\r\n  devtools(\r\n    (set) => ({\r\n      state: TxStateType.New,\r\n      txHash: '',\r\n      clearTxHash: () => set({ txHash: '' }),\r\n      setState: (newState) => set(() => ({ state: newState })),\r\n      sendTransaction: async (signer, selectedAssets, transactionData) => {\r\n        const address = await signer.getAddress()\r\n        try {\r\n          const txNoGasLimit = {\r\n            to: transactionData.to,\r\n            value: BigNumber.from(transactionData.valueToSend),\r\n            data: transactionData.data,\r\n          }\r\n\r\n          const gasLimit = (await signer.estimateGas(txNoGasLimit)).mul(105).div(100)\r\n          // tx['gasLimit'] = gasLimit\r\n          const tx = { ...txNoGasLimit, gasLimit } // TODO test this works when firing off tx\r\n\r\n          set({ state: TxStateType.Signing })\r\n          const res = await signer.sendTransaction(tx)\r\n          set({ state: TxStateType.Confirming })\r\n          set({ txHash: res.hash })\r\n\r\n          const txReceipt = await res.wait()\r\n\r\n          //tx was mined successfully\r\n          if (txReceipt.status === 1) {\r\n            const nftsPurchased = findNFTsPurchased(txReceipt, address, selectedAssets, transactionData.route)\r\n            const nftsNotPurchased = findNFTsNotPurchased(selectedAssets, nftsPurchased)\r\n            set({ state: TxStateType.Success })\r\n            return {\r\n              nftsPurchased,\r\n              nftsNotPurchased,\r\n              txReceipt,\r\n            }\r\n          } else {\r\n            set({ state: TxStateType.Failed })\r\n            return {\r\n              nftsPurchased: [],\r\n              nftsNotPurchased: selectedAssets,\r\n              txReceipt,\r\n            }\r\n          }\r\n        } catch (e) {\r\n          console.log('Error creating multiAssetSwap Transaction', e)\r\n          if (e.code === 4001) {\r\n            set({ state: TxStateType.Denied })\r\n          } else {\r\n            set({ state: TxStateType.Invalid })\r\n          }\r\n          return\r\n        }\r\n      },\r\n    }),\r\n    { name: 'useSendTransactionState' }\r\n  )\r\n)\r\n\r\nconst findNFTsPurchased = (\r\n  txReceipt: ContractReceipt,\r\n  signerAddress: string,\r\n  toBuy: GenieAsset[],\r\n  txRoute: RoutingItem[]\r\n): UpdatedGenieAsset[] => {\r\n  if (!txReceipt.logs) {\r\n    return []\r\n  }\r\n  const erc721Interface = new Interface(ERC721)\r\n  const erc1155Interface = new Interface(ERC1155)\r\n  const cryptopunksMarketInterface = new Interface(CryptoPunksMarket)\r\n\r\n  // Find successfully purchased NFTs (and assign to state nftsPurchased) by parsing events\r\n  const transferErc721BuyEvents = txReceipt.logs.filter(\r\n    (x) =>\r\n      x.topics[0] === erc721Interface.getEventTopic('Transfer') &&\r\n      hexStripZeros(x.topics[2]).toLowerCase() === signerAddress.toLowerCase()\r\n  )\r\n\r\n  const transferredErc721 = transferErc721BuyEvents.map((x) => ({\r\n    address: x.address,\r\n    tokenId: parseInt(x.topics[3]).toString(),\r\n  }))\r\n  const transferErc1155BuyEvents = txReceipt.logs.filter(\r\n    (x) =>\r\n      x.topics[0] === erc1155Interface.getEventTopic('TransferSingle') &&\r\n      hexStripZeros(x.topics[3]).toLowerCase() === signerAddress.toLowerCase()\r\n  )\r\n\r\n  const transferredErc1155 = transferErc1155BuyEvents.map((x) => ({\r\n    address: x.address,\r\n    tokenId: erc1155Interface.parseLog(x).args[3].toString(),\r\n  }))\r\n\r\n  // Find transferred CryptoPunks\r\n  const transferCryptopunkEvents = txReceipt.logs.filter(\r\n    (x) =>\r\n      x.topics[0] === cryptopunksMarketInterface.getEventTopic('PunkTransfer') &&\r\n      hexStripZeros(x.topics[2]).toLowerCase() === signerAddress.toLowerCase()\r\n  )\r\n  const transferredCryptopunks = transferCryptopunkEvents.map((x) => ({\r\n    address: x.address,\r\n    tokenId: cryptopunksMarketInterface.parseLog(x).args[2].toString(),\r\n  }))\r\n\r\n  const allTransferred = [...transferredErc721, ...transferredErc1155, ...transferredCryptopunks]\r\n\r\n  const transferredItems = toBuy.filter((assetToBuy) => {\r\n    return allTransferred.some(\r\n      (purchasedNft) =>\r\n        assetToBuy.address.toLowerCase() === purchasedNft.address.toLowerCase() &&\r\n        parseInt(assetToBuy.tokenId).toString() === purchasedNft.tokenId\r\n    )\r\n  })\r\n\r\n  return combineBuyItemsWithTxRoute(transferredItems, txRoute)\r\n}\r\n\r\nconst findNFTsNotPurchased = (toBuy: GenieAsset[], nftsPurchased: UpdatedGenieAsset[]) => {\r\n  const nftsNotPurchased: Array<UpdatedGenieAsset> = []\r\n  toBuy.forEach((selectedAsset) => {\r\n    const purchasedNft = nftsPurchased.find(\r\n      (x) => x.address.toLowerCase() === selectedAsset.address.toLowerCase() && x.tokenId === selectedAsset.tokenId\r\n    )\r\n    if (!purchasedNft) {\r\n      nftsNotPurchased.push(selectedAsset)\r\n    }\r\n  })\r\n  return nftsNotPurchased\r\n}\r\n","import { TxResponse } from 'nft/types'\r\nimport create from 'zustand'\r\nimport { devtools } from 'zustand/middleware'\r\n\r\ntype TransactionResponseValue = TxResponse | undefined\r\n\r\ntype TransactionResponseState = {\r\n  transactionResponse: TransactionResponseValue\r\n  setTransactionResponse: (txResponse: TransactionResponseValue) => void\r\n}\r\n\r\nexport const useTransactionResponse = create<TransactionResponseState>()(\r\n  devtools(\r\n    (set) => ({\r\n      transactionResponse: undefined,\r\n      setTransactionResponse: (txResponse) =>\r\n        set(() => ({\r\n          transactionResponse: txResponse,\r\n        })),\r\n    }),\r\n    { name: 'useTransactionResponse' }\r\n  )\r\n)\r\n","import create from 'zustand'\r\nimport { devtools, persist } from 'zustand/middleware'\r\n\r\nimport { GenieAsset } from '../types'\r\n\r\ninterface SweepState {\r\n  sweepAssets: GenieAsset[]\r\n  setSweepAssets: (assets: GenieAsset[]) => void\r\n  removeSweepAsset: (asset: GenieAsset) => void\r\n  reset: () => void\r\n}\r\n\r\nexport const useSweep = create<SweepState>()(\r\n  persist(\r\n    devtools((set) => ({\r\n      sweepAssets: [],\r\n      setSweepAssets: (assets) =>\r\n        set(() => {\r\n          return { sweepAssets: assets }\r\n        }),\r\n      removeSweepAsset: (asset) => {\r\n        set(({ sweepAssets }) => {\r\n          if (sweepAssets.length === 0) return { sweepAssets: [] }\r\n          else sweepAssets.find((x) => x.tokenId === asset.tokenId && x.address === asset.address)\r\n          const assetsCopy = [...sweepAssets]\r\n          assetsCopy.splice(\r\n            sweepAssets.findIndex((n) => n.tokenId === asset.tokenId && n.address === asset.address),\r\n            1\r\n          )\r\n          return { sweepAssets: assetsCopy }\r\n        })\r\n      },\r\n      reset: () => set(() => ({ sweepAssets: [] })),\r\n    })),\r\n    { name: 'useSweep' }\r\n  )\r\n)\r\n","import { BigNumber } from '@ethersproject/bignumber'\r\nimport type { Web3Provider } from '@ethersproject/providers'\r\nimport { parseEther } from '@ethersproject/units'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { useNativeCurrencyBalances } from 'state/connection/hooks'\r\n\r\ninterface WalletBalanceProps {\r\n  address: string\r\n  balance: string\r\n  weiBalance: BigNumber\r\n  provider: Web3Provider | undefined\r\n}\r\n\r\nexport function useWalletBalance(): WalletBalanceProps {\r\n  const { account: address, provider } = useWeb3React()\r\n  const balanceString = useNativeCurrencyBalances(address ? [address] : [])?.[address ?? '']?.toSignificant(3) || '0'\r\n\r\n  return address == null\r\n    ? {\r\n        address: '',\r\n        balance: '0',\r\n        weiBalance: parseEther('0'),\r\n        provider: undefined,\r\n      }\r\n    : {\r\n        address,\r\n        balance: balanceString,\r\n        weiBalance: parseEther(balanceString),\r\n        provider,\r\n      }\r\n}\r\n","import create from 'zustand'\r\nimport { devtools } from 'zustand/middleware'\r\n\r\nimport { WalletAsset, WalletCollection } from '../types'\r\n\r\ninterface WalletCollectionState {\r\n  walletAssets: WalletAsset[]\r\n  walletCollections: WalletCollection[]\r\n  displayAssets: WalletAsset[]\r\n  collectionFilters: string[]\r\n  listFilter: string\r\n  setWalletAssets: (assets: WalletAsset[]) => void\r\n  setWalletCollections: (collections: WalletCollection[]) => void\r\n  setCollectionFilters: (address: string) => void\r\n  clearCollectionFilters: () => void\r\n  setListFilter: (value: string) => void\r\n  setDisplayAssets: (walletAssets: WalletAsset[], listFilter: string) => void\r\n}\r\n\r\nexport const useWalletCollections = create<WalletCollectionState>()(\r\n  devtools(\r\n    (set) => ({\r\n      walletAssets: [],\r\n      walletCollections: [],\r\n      displayAssets: [],\r\n      collectionFilters: [],\r\n      listFilter: 'All',\r\n      setWalletAssets: (assets) =>\r\n        set(() => {\r\n          return {\r\n            walletAssets: assets?.filter((asset) => asset.asset_contract?.schema_name === 'ERC721'),\r\n          }\r\n        }),\r\n      setWalletCollections: (collections) =>\r\n        set(() => {\r\n          return { walletCollections: collections }\r\n        }),\r\n      setCollectionFilters: (address) =>\r\n        set(({ collectionFilters }) => {\r\n          if (collectionFilters.length === 0) return { collectionFilters: [address] }\r\n          else if (!!collectionFilters.find((x) => x === address))\r\n            return { collectionFilters: collectionFilters.filter((n) => n !== address) }\r\n          else return { collectionFilters: [...collectionFilters, address] }\r\n        }),\r\n      clearCollectionFilters: () =>\r\n        set(() => {\r\n          return { collectionFilters: [] }\r\n        }),\r\n      setListFilter: (value) =>\r\n        set(() => {\r\n          return { listFilter: value }\r\n        }),\r\n      setDisplayAssets: (walletAssets, listFilter) =>\r\n        set(() => {\r\n          return { displayAssets: filterWalletAssets(walletAssets, listFilter) }\r\n        }),\r\n    }),\r\n    { name: 'useWalletCollections' }\r\n  )\r\n)\r\n\r\nconst filterWalletAssets = (walletAssets: WalletAsset[], listFilter: string) => {\r\n  let displayAssets = walletAssets\r\n  if (listFilter === 'Listed')\r\n    displayAssets = displayAssets?.filter((x) => {\r\n      return x.listing_date !== null\r\n    })\r\n  if (listFilter === 'Unlisted')\r\n    displayAssets = displayAssets?.filter((x) => {\r\n      return x.listing_date === null\r\n    })\r\n  return displayAssets\r\n}\r\n","export const roundAndPluralize = (i: number, word: string) => {\r\n  const rounded = Math.floor(i)\r\n\r\n  return `${rounded} ${word}${rounded === 1 ? '' : 's'}`\r\n}\r\n\r\nexport const pluralize = (number: number) => (number !== 1 ? 's' : '')\r\n","import { roundAndPluralize } from './roundAndPluralize'\r\n\r\nexport function timeSince(date: Date, min?: boolean) {\r\n  const seconds = Math.floor((new Date().getTime() - date.getTime()) / 1000)\r\n\r\n  let interval = seconds / 31536000\r\n\r\n  if (interval > 1) return roundAndPluralize(interval, min ? 'yr' : 'year')\r\n\r\n  interval = seconds / 2592000\r\n  if (interval > 1) return roundAndPluralize(interval, min ? 'mth' : 'month')\r\n\r\n  interval = seconds / 86400\r\n  if (interval > 1) return roundAndPluralize(interval, 'day')\r\n\r\n  interval = seconds / 3600\r\n\r\n  if (interval > 1) return roundAndPluralize(interval, min ? 'hr' : 'hour')\r\n\r\n  interval = seconds / 60\r\n  if (interval > 1) return roundAndPluralize(interval, 'min')\r\n\r\n  return roundAndPluralize(interval, 'sec')\r\n}\r\n\r\nconst MINUTE = 1000 * 60\r\nconst HOUR = MINUTE * 60\r\nconst DAY = 24 * HOUR\r\n\r\nexport const timeLeft = (targetDate: Date): string => {\r\n  const countDown = new Date(targetDate).getTime() - new Date().getTime()\r\n  const days = Math.floor(countDown / DAY)\r\n  const hours = Math.floor((countDown % DAY) / HOUR)\r\n  const minutes = Math.floor((countDown % HOUR) / MINUTE)\r\n\r\n  return `${days !== 0 ? roundAndPluralize(days, 'day') : ''} ${\r\n    hours !== 0 ? roundAndPluralize(hours, 'hour') : ''\r\n  } ${roundAndPluralize(minutes, 'minute')}`\r\n}\r\n","import { BigNumber } from '@ethersproject/bignumber'\r\nimport { formatEther } from '@ethersproject/units'\r\nimport { TxResponse, UpdatedGenieAsset } from 'nft/types'\r\nimport { getTotalNftValue } from 'nft/utils'\r\n\r\n// Shortens a given txHash. With standard charsToShorten var of 4, a hash will become 0x1234...1234\r\nexport const shortenTxHash = (txHash: string, charsToShorten = 4, addCharsToBack = 0): string => {\r\n  return `${txHash.substring(0, charsToShorten + 2)}...${txHash.substring(\r\n    txHash.length - charsToShorten,\r\n    txHash.length - (charsToShorten + addCharsToBack)\r\n  )}`\r\n}\r\n\r\nexport const parseTransactionResponse = (transactionResponse: TxResponse | undefined, ethPrice: number) => {\r\n  let nftsPurchased: UpdatedGenieAsset[] = []\r\n  let nftsNotPurchased: UpdatedGenieAsset[] = []\r\n  let showPurchasedModal = false\r\n  let showRefundModal = false\r\n  let totalPurchaseValue = BigNumber.from(0)\r\n  let totalRefundValue = BigNumber.from(0)\r\n  let totalUSDRefund = 0\r\n  let txFeeFiat = 0\r\n\r\n  if (transactionResponse !== undefined) {\r\n    const { nftsPurchased: purchasedNfts, nftsNotPurchased: notPurchasedNfts, txReceipt } = transactionResponse\r\n    if (nftsPurchased && nftsNotPurchased && txReceipt) {\r\n      nftsPurchased = purchasedNfts\r\n      nftsNotPurchased = notPurchasedNfts\r\n      showPurchasedModal = nftsPurchased.length >= 1\r\n      showRefundModal = nftsNotPurchased.length >= 1\r\n      totalPurchaseValue = getTotalNftValue(nftsPurchased)\r\n      totalRefundValue = getTotalNftValue(nftsNotPurchased)\r\n      totalUSDRefund = totalRefundValue && parseFloat(formatEther(totalRefundValue)) * ethPrice\r\n      const txFee = BigNumber.from(txReceipt ? txReceipt.gasUsed : 0).mul(\r\n        BigNumber.from(txReceipt ? txReceipt.effectiveGasPrice : 0)\r\n      )\r\n      txFeeFiat = parseFloat(formatEther(txFee)) * ethPrice\r\n    }\r\n  }\r\n\r\n  return {\r\n    nftsPurchased,\r\n    nftsNotPurchased,\r\n    showPurchasedModal,\r\n    showRefundModal,\r\n    totalPurchaseValue,\r\n    totalRefundValue,\r\n    totalUSDRefund,\r\n    txFeeFiat,\r\n  }\r\n}\r\n\r\n// Given the length of the array of successfully purchased NFTs, returns the maxHeight and maxWidth of each asset preview\r\nexport const getSuccessfulImageSize = (numSuccessful: number, isMobile: boolean) => {\r\n  const sizeModifier = isMobile ? 2 : 1\r\n  if (numSuccessful === 1) {\r\n    return 574 / sizeModifier\r\n  } else if (numSuccessful === 2) {\r\n    return 280 / sizeModifier\r\n  } else if (numSuccessful === 3 || (numSuccessful >= 5 && numSuccessful < 7)) {\r\n    return 184 / sizeModifier\r\n  } else if (numSuccessful === 4 || (numSuccessful >= 7 && numSuccessful < 13)) {\r\n    return 136 / sizeModifier\r\n  } else if (numSuccessful >= 13 && numSuccessful < 21) {\r\n    return 108 / sizeModifier\r\n  } else return isMobile ? 39 : 64\r\n}\r\n","import create from 'zustand'\r\nimport { devtools } from 'zustand/middleware'\r\n\r\nexport enum SortBy {\r\n  LowToHigh,\r\n  HighToLow,\r\n  RareToCommon,\r\n  CommonToRare,\r\n}\r\n\r\nexport const SortByPointers = {\r\n  [SortBy.HighToLow]: 'highest',\r\n  [SortBy.LowToHigh]: 'lowest',\r\n  [SortBy.RareToCommon]: 'rare',\r\n  [SortBy.CommonToRare]: 'common',\r\n}\r\n\r\nexport type Trait = {\r\n  trait_type: string\r\n  trait_value: string\r\n  trait_count: number\r\n  floorPrice?: number\r\n}\r\n\r\ninterface State {\r\n  traits: Trait[]\r\n  markets: string[]\r\n  minPrice: string\r\n  maxPrice: string\r\n  minRarity: number | ''\r\n  maxRarity: number | ''\r\n  marketCount: Record<string, number>\r\n  buyNow: boolean\r\n  search: string\r\n  sortBy: SortBy\r\n  showFullTraitName: { shouldShow: boolean; trait_value?: string; trait_type: string }\r\n}\r\n\r\ntype Actions = {\r\n  setMarketCount: (_: Record<string, number>) => void\r\n  addMarket: (market: string) => void\r\n  removeMarket: (market: string) => void\r\n  addTrait: (trait: Trait) => void\r\n  removeTrait: (trait: Trait) => void\r\n  reset: () => void\r\n  setMinPrice: (price: string) => void\r\n  setMaxPrice: (price: string) => void\r\n  setMinRarity: (range: number | '') => void\r\n  setMaxRarity: (range: number | '') => void\r\n  setBuyNow: (bool: boolean) => void\r\n  setSearch: (term: string) => void\r\n  setSortBy: (sortBy: SortBy) => void\r\n  toggleShowFullTraitName: (show: { shouldShow: boolean; trait_value: string; trait_type: string }) => void\r\n}\r\n\r\nexport type CollectionFilters = State & Actions\r\n\r\nexport const initialCollectionFilterState: State = {\r\n  minPrice: '',\r\n  maxPrice: '',\r\n  minRarity: '',\r\n  maxRarity: '',\r\n  traits: [],\r\n  markets: [],\r\n  marketCount: {},\r\n  buyNow: true,\r\n  search: '',\r\n  sortBy: SortBy.LowToHigh,\r\n  showFullTraitName: { shouldShow: false, trait_value: '', trait_type: '' },\r\n}\r\n\r\nexport const useCollectionFilters = create<CollectionFilters>()(\r\n  devtools(\r\n    (set) => ({\r\n      ...initialCollectionFilterState,\r\n      setSortBy: (sortBy) => set({ sortBy }),\r\n      setSearch: (search) => set({ search }),\r\n      setBuyNow: (buyNow) => set({ buyNow }),\r\n      setMarketCount: (marketCount) => set({ marketCount }),\r\n      addMarket: (market) => set(({ markets }) => ({ markets: [...markets, market] })),\r\n      removeMarket: (market) => set(({ markets }) => ({ markets: markets.filter((_market) => market !== _market) })),\r\n      addTrait: (trait) => set(({ traits }) => ({ traits: [...traits, trait] })),\r\n      removeTrait: (trait) =>\r\n        set(({ traits }) => ({\r\n          traits: traits.filter((x) => JSON.stringify(x) !== JSON.stringify(trait)),\r\n        })),\r\n      reset: () => set(() => ({ traits: [], minRarity: '', maxRarity: '', markets: [], minPrice: '', maxPrice: '' })),\r\n      setMinPrice: (price) => set(() => ({ minPrice: price })),\r\n      setMaxPrice: (price) => set(() => ({ maxPrice: price })),\r\n      setMinRarity: (range) => set(() => ({ minRarity: range })),\r\n      setMaxRarity: (range) => set(() => ({ maxRarity: range })),\r\n      toggleShowFullTraitName: ({ shouldShow, trait_value, trait_type }) =>\r\n        set(() => ({ showFullTraitName: { shouldShow, trait_value, trait_type } })),\r\n    }),\r\n    { name: 'useCollectionTraits' }\r\n  )\r\n)\r\n","export enum Currency {\r\n  ETH = 'ETH',\r\n  LOOKS = 'LOOKS',\r\n  MATIC = 'MATIC',\r\n}\r\n\r\nexport const fetchPrice = async (currency: Currency = Currency.ETH): Promise<number | undefined> => {\r\n  try {\r\n    const response = await fetch(`https://api.coinbase.com/v2/exchange-rates?currency=${currency}`)\r\n    return response.json().then((j) => j.data.rates.USD)\r\n  } catch (e) {\r\n    console.error(e)\r\n    return\r\n  }\r\n}\r\n","import { defaultAbiCoder } from '@ethersproject/abi'\r\nimport { BigNumber, BigNumberish } from '@ethersproject/bignumber'\r\nimport { hexZeroPad } from '@ethersproject/bytes'\r\nimport { AddressZero } from '@ethersproject/constants'\r\nimport { keccak256 } from '@ethersproject/keccak256'\r\nimport type { Web3Provider } from '@ethersproject/providers'\r\nimport { randomBytes } from '@ethersproject/random'\r\n\r\nconst dataParamType = `tuple(address token, uint256 tokenId)[]`\r\nconst orderItemParamType = `tuple(uint256 price, bytes data)`\r\nconst orderParamTypes = [\r\n  `uint256`,\r\n  `address`,\r\n  `uint256`,\r\n  `uint256`,\r\n  `uint256`,\r\n  `uint256`,\r\n  `address`,\r\n  `bytes`,\r\n  `uint256`,\r\n  `${orderItemParamType}[]`,\r\n]\r\nconst orderParamType = `tuple(uint256 salt, address user, uint256 network, uint256 intent, uint256 delegateType, uint256 deadline, address currency, bytes dataMask, ${orderItemParamType}[] items, bytes32 r, bytes32 s, uint8 v, uint8 signVersion)`\r\n\r\nexport type OfferItem = {\r\n  price: BigNumber\r\n  tokens: {\r\n    token: string\r\n    tokenId: BigNumberish\r\n  }[]\r\n}\r\n\r\ntype OrderItem = {\r\n  price: BigNumberish\r\n  data: string\r\n}\r\n\r\ntype Order = {\r\n  salt: BigNumberish\r\n  user: string\r\n  network: BigNumberish\r\n  intent: BigNumberish\r\n  delegateType: BigNumberish\r\n  deadline: BigNumberish\r\n  currency: string\r\n  dataMask: string\r\n  items: OrderItem[]\r\n  // signature\r\n  r: string\r\n  s: string\r\n  v: number\r\n  signVersion: number\r\n}\r\n\r\nexport type OrderPayload = {\r\n  order: string\r\n  isBundle: boolean\r\n  bundleName: string\r\n  bundleDesc: string\r\n  orderIds: number[]\r\n  changePrice: boolean\r\n  isCollection: boolean\r\n}\r\n\r\nexport type OrderResp = {\r\n  success: boolean\r\n  code: number\r\n  error?: string\r\n}\r\n\r\nconst randomSalt = () => {\r\n  const randomHex = BigNumber.from(randomBytes(16)).toHexString()\r\n  return hexZeroPad(randomHex, 64)\r\n}\r\n\r\nconst encodeItemData = (data: { token: string; tokenId: BigNumberish }[]) => {\r\n  return defaultAbiCoder.encode([dataParamType], [data])\r\n}\r\n\r\nexport const signOrderData = async (web3Provider: Web3Provider, order: Order) => {\r\n  const orderData = defaultAbiCoder.encode(orderParamTypes, [\r\n    order.salt,\r\n    order.user,\r\n    order.network,\r\n    order.intent,\r\n    order.delegateType,\r\n    order.deadline,\r\n    order.currency,\r\n    order.dataMask,\r\n    order.items.length,\r\n    order.items,\r\n  ])\r\n  const orderHash = keccak256(orderData)\r\n  const orderSig = (await web3Provider.send('personal_sign', [orderHash, order.user])) as string\r\n  order.r = `0x${orderSig.slice(2, 66)}`\r\n  order.s = `0x${orderSig.slice(66, 130)}`\r\n  order.v = parseInt(orderSig.slice(130, 132), 16)\r\n  fixSignature(order)\r\n}\r\n\r\nconst fixSignature = (data: Order) => {\r\n  // in geth its always 27/28, in ganache its 0/1. Change to 27/28 to prevent\r\n  // signature malleability if version is 0/1\r\n  // see https://github.com/ethereum/go-ethereum/blob/v1.8.23/internal/ethapi/api.go#L465\r\n  if (data.v < 27) {\r\n    data.v = data.v + 27\r\n  }\r\n}\r\n\r\nexport const encodeOrder = (order: Order): string => {\r\n  return defaultAbiCoder.encode([orderParamType], [order])\r\n}\r\n\r\nexport const createSellOrder = (user: string, deadline: number, items: OfferItem[]): Order => {\r\n  const salt = randomSalt()\r\n  const network = 1 // mainnet\r\n  const intent = 1 // INTENT_SELL\r\n  const delegateType = 1 // DELEGATION_TYPE_ERC721\r\n  const currency = AddressZero // ETH\r\n  return {\r\n    salt,\r\n    user,\r\n    network,\r\n    intent,\r\n    delegateType,\r\n    deadline,\r\n    currency,\r\n    dataMask: '0x',\r\n    items: items.map((item) => ({\r\n      price: item.price,\r\n      data: encodeItemData(item.tokens),\r\n    })),\r\n    r: '',\r\n    s: '',\r\n    v: 0,\r\n    signVersion: 1,\r\n  }\r\n}\r\n","import { Signer } from '@ethersproject/abstract-signer'\r\nimport { BigNumber } from '@ethersproject/bignumber'\r\nimport { Contract } from '@ethersproject/contracts'\r\nimport type { JsonRpcSigner, Web3Provider } from '@ethersproject/providers'\r\nimport { parseEther } from '@ethersproject/units'\r\nimport { addressesByNetwork, MakerOrder, signMakerOrder, SupportedChainId } from '@looksrare/sdk'\r\nimport { Seaport } from '@opensea/seaport-js'\r\nimport { ItemType } from '@opensea/seaport-js/lib/constants'\r\nimport { ConsiderationInputItem } from '@opensea/seaport-js/lib/types'\r\nimport {\r\n  OPENSEA_DEFAULT_CROSS_CHAIN_CONDUIT_KEY,\r\n  OPENSEA_DEFAULT_ZONE,\r\n  OPENSEA_KEY_TO_CONDUIT,\r\n  OPENSEA_LISTINGS_API_PATH,\r\n} from 'nft/queries/openSea'\r\n\r\nimport ERC721 from '../../abis/erc721.json'\r\nimport { createLooksRareOrder, newX2Y2Order, PostOpenSeaSellOrder } from '../queries'\r\nimport { INVERSE_BASIS_POINTS, OPENSEA_DEFAULT_FEE, OPENSEA_FEE_ADDRESS } from '../queries/openSea'\r\nimport { ListingMarket, ListingStatus, WalletAsset } from '../types'\r\nimport { createSellOrder, encodeOrder, OfferItem, OrderPayload, signOrderData } from './x2y2'\r\n\r\nexport const ListingMarkets: ListingMarket[] = [\r\n  {\r\n    name: 'LooksRare',\r\n    fee: 2.0,\r\n    icon: '/nft/svgs/marketplaces/looksrare.svg',\r\n  },\r\n  {\r\n    name: 'OpenSea',\r\n    fee: 2.5,\r\n    icon: '/nft/svgs/marketplaces/opensea.svg',\r\n  },\r\n  {\r\n    name: 'X2Y2',\r\n    fee: 0.5,\r\n    icon: '/nft/svgs/marketplaces/x2y2.svg',\r\n  },\r\n]\r\n\r\nconst createConsiderationItem = (basisPoints: string, recipient: string): ConsiderationInputItem => {\r\n  return {\r\n    amount: basisPoints,\r\n    recipient,\r\n  }\r\n}\r\n\r\nconst getConsiderationItems = (\r\n  asset: WalletAsset,\r\n  price: BigNumber,\r\n  signerAddress: string\r\n): {\r\n  sellerFee: ConsiderationInputItem\r\n  openseaFee: ConsiderationInputItem\r\n  creatorFee?: ConsiderationInputItem\r\n} => {\r\n  const openSeaBasisPoints = OPENSEA_DEFAULT_FEE * INVERSE_BASIS_POINTS\r\n  const creatorFeeBasisPoints = asset.creatorPercentage * INVERSE_BASIS_POINTS\r\n  const sellerBasisPoints = INVERSE_BASIS_POINTS - openSeaBasisPoints - creatorFeeBasisPoints\r\n\r\n  const openseaFee = price.mul(BigNumber.from(openSeaBasisPoints)).div(BigNumber.from(INVERSE_BASIS_POINTS)).toString()\r\n  const creatorFee = price\r\n    .mul(BigNumber.from(creatorFeeBasisPoints))\r\n    .div(BigNumber.from(INVERSE_BASIS_POINTS))\r\n    .toString()\r\n  const sellerFee = price.mul(BigNumber.from(sellerBasisPoints)).div(BigNumber.from(INVERSE_BASIS_POINTS)).toString()\r\n\r\n  return {\r\n    sellerFee: createConsiderationItem(sellerFee, signerAddress),\r\n    openseaFee: createConsiderationItem(openseaFee, OPENSEA_FEE_ADDRESS),\r\n    creatorFee:\r\n      creatorFeeBasisPoints > 0 ? createConsiderationItem(creatorFee, asset.asset_contract.payout_address) : undefined,\r\n  }\r\n}\r\n\r\nexport async function approveCollection(\r\n  operator: string,\r\n  collectionAddress: string,\r\n  signer: Signer,\r\n  setStatus: (newStatus: ListingStatus) => void\r\n): Promise<void> {\r\n  // This will work for both 721s & 1155s because they both have the\r\n  // setApprovalForAll() method\r\n  const ERC721Contract = new Contract(collectionAddress, ERC721, signer)\r\n  const signerAddress = await signer.getAddress()\r\n  setStatus(ListingStatus.PENDING)\r\n  try {\r\n    const approved = await ERC721Contract.isApprovedForAll(signerAddress, operator)\r\n    if (approved) {\r\n      setStatus(ListingStatus.APPROVED)\r\n      return\r\n    }\r\n\r\n    setStatus(ListingStatus.SIGNING)\r\n    const approvalTransaction = await ERC721Contract.setApprovalForAll(operator, true)\r\n\r\n    setStatus(ListingStatus.PENDING)\r\n    const tx = await approvalTransaction.wait()\r\n\r\n    tx.status === 1 ? setStatus(ListingStatus.APPROVED) : setStatus(ListingStatus.FAILED)\r\n  } catch (error) {\r\n    if (error.code === 4001) setStatus(ListingStatus.REJECTED)\r\n    else setStatus(ListingStatus.FAILED)\r\n  }\r\n}\r\n\r\nexport async function signListing(\r\n  marketplace: ListingMarket,\r\n  asset: WalletAsset,\r\n  signer: JsonRpcSigner,\r\n  provider: Web3Provider,\r\n  looksRareNonce = 0,\r\n  setStatus: (newStatus: ListingStatus) => void\r\n): Promise<boolean> {\r\n  const seaport = new Seaport(provider, {\r\n    conduitKeyToConduit: OPENSEA_KEY_TO_CONDUIT,\r\n    overrides: {\r\n      defaultConduitKey: OPENSEA_DEFAULT_CROSS_CHAIN_CONDUIT_KEY,\r\n    },\r\n  })\r\n\r\n  const signerAddress = await signer.getAddress()\r\n  const listingPrice = asset.newListings?.find((listing) => listing.marketplace.name === marketplace.name)?.price\r\n  if (!listingPrice || !asset.expirationTime) return false\r\n  switch (marketplace.name) {\r\n    case 'OpenSea':\r\n      try {\r\n        const listingInWei = parseEther(`${listingPrice}`)\r\n        const { sellerFee, openseaFee, creatorFee } = getConsiderationItems(asset, listingInWei, signerAddress)\r\n        const considerationItems = [sellerFee, openseaFee, creatorFee].filter(\r\n          (item): item is ConsiderationInputItem => item !== undefined\r\n        )\r\n\r\n        const { executeAllActions } = await seaport.createOrder(\r\n          {\r\n            offer: [\r\n              {\r\n                itemType: ItemType.ERC721,\r\n                token: asset.asset_contract.address,\r\n                identifier: asset.tokenId,\r\n                amount: '1',\r\n              },\r\n            ],\r\n            consideration: considerationItems,\r\n            endTime: asset.expirationTime.toString(),\r\n            zone: OPENSEA_DEFAULT_ZONE,\r\n            restrictedByZone: true,\r\n            allowPartialFills: true,\r\n          },\r\n          signerAddress\r\n        )\r\n\r\n        const order = await executeAllActions()\r\n        const res = await PostOpenSeaSellOrder(OPENSEA_LISTINGS_API_PATH, order)\r\n        if (res) setStatus(ListingStatus.APPROVED)\r\n        return true\r\n      } catch (error) {\r\n        if (error.code === 4001) setStatus(ListingStatus.REJECTED)\r\n        else setStatus(ListingStatus.FAILED)\r\n        return false\r\n      }\r\n    case 'LooksRare':\r\n      const addresses = addressesByNetwork[SupportedChainId.MAINNET]\r\n      const currentTime = Math.round(Date.now() / 1000)\r\n      const makerOrder: MakerOrder = {\r\n        // true --> ask / false --> bid\r\n        isOrderAsk: true,\r\n        // signer address of the maker order\r\n        signer: signerAddress,\r\n        // collection address\r\n        collection: asset.asset_contract.address,\r\n        // Price in WEI\r\n        price: parseEther(listingPrice.toString()),\r\n        // Token ID\r\n        tokenId: BigNumber.from(asset.tokenId),\r\n        // amount of tokens to sell/purchase (must be 1 for ERC721, 1+ for ERC1155)\r\n        amount: BigNumber.from(1),\r\n        // strategy for trade execution (e.g., DutchAuction, StandardSaleForFixedPrice), see addresses in the SDK\r\n        strategy: addresses.STRATEGY_STANDARD_SALE,\r\n        // currency address\r\n        currency: addresses.WETH,\r\n        // order nonce (must be unique unless new maker order is meant to override existing one e.g., lower ask price)\r\n        nonce: BigNumber.from(looksRareNonce),\r\n        // startTime timestamp in seconds\r\n        startTime: BigNumber.from(currentTime),\r\n        // endTime timestamp in seconds\r\n        endTime: BigNumber.from(asset.expirationTime),\r\n        // minimum ratio to be received by the user (per 10000)\r\n        minPercentageToAsk: BigNumber.from(10000)\r\n          .sub(BigNumber.from(200).add(BigNumber.from(asset.creatorPercentage * 10000)))\r\n          .toNumber(),\r\n        // params (e.g., price, target account for private sale)\r\n        params: [],\r\n      }\r\n\r\n      try {\r\n        const signatureHash = await signMakerOrder(\r\n          signer,\r\n          SupportedChainId.MAINNET,\r\n          makerOrder,\r\n          process.env.REACT_APP_LOOKSRARE_MARKETPLACE_CONTRACT || ''\r\n        )\r\n        setStatus(ListingStatus.PENDING)\r\n        const payload = {\r\n          signature: signatureHash,\r\n          tokenId: asset.tokenId,\r\n          collection: asset.asset_contract.address,\r\n          strategy: addresses.STRATEGY_STANDARD_SALE,\r\n          currency: addresses.WETH,\r\n          signer: signerAddress,\r\n          isOrderAsk: true,\r\n          nonce: looksRareNonce,\r\n          amount: 1,\r\n          price: parseEther(listingPrice.toString()).toString(),\r\n          startTime: currentTime,\r\n          endTime: asset.expirationTime,\r\n          minPercentageToAsk: 10000 - (200 + asset.creatorPercentage * 10000),\r\n          params: [],\r\n        }\r\n        const res = await createLooksRareOrder(payload)\r\n        if (res) setStatus(ListingStatus.APPROVED)\r\n        return res\r\n      } catch (error) {\r\n        if (error.code === 4001) setStatus(ListingStatus.REJECTED)\r\n        else setStatus(ListingStatus.FAILED)\r\n        return false\r\n      }\r\n\r\n    case 'X2Y2':\r\n      const orderItem: OfferItem = {\r\n        price: parseEther(listingPrice.toString()),\r\n        tokens: [\r\n          {\r\n            token: asset.asset_contract.address,\r\n            tokenId: BigNumber.from(parseFloat(asset.tokenId)),\r\n          },\r\n        ],\r\n      }\r\n      const order = createSellOrder(signerAddress, asset.expirationTime, [orderItem])\r\n      try {\r\n        await signOrderData(provider, order)\r\n        const payload: OrderPayload = {\r\n          order: encodeOrder(order),\r\n          isBundle: false,\r\n          bundleName: '',\r\n          bundleDesc: '',\r\n          orderIds: [],\r\n          changePrice: false,\r\n          isCollection: false,\r\n        }\r\n        setStatus(ListingStatus.PENDING)\r\n        // call server api\r\n        const resp = await newX2Y2Order(payload)\r\n        if (resp) setStatus(ListingStatus.APPROVED)\r\n        return resp\r\n      } catch (error) {\r\n        if (error.code === 4001) setStatus(ListingStatus.REJECTED)\r\n        else setStatus(ListingStatus.FAILED)\r\n        return false\r\n      }\r\n\r\n    default:\r\n      return false\r\n  }\r\n}\r\n","import create from 'zustand'\r\nimport { devtools } from 'zustand/middleware'\r\n\r\ninterface State {\r\n  isCollectionNftsLoading: boolean\r\n  setIsCollectionNftsLoading: (isCollectionNftsLoading: boolean) => void\r\n  isCollectionStatsLoading: boolean\r\n  setIsCollectionStatsLoading: (isCollectionStatsLoading: boolean) => void\r\n}\r\n\r\nexport const useIsCollectionLoading = create<State>()(\r\n  devtools(\r\n    (set) => ({\r\n      isCollectionNftsLoading: false,\r\n      setIsCollectionNftsLoading: (isCollectionNftsLoading) =>\r\n        set(() => {\r\n          return { isCollectionNftsLoading }\r\n        }),\r\n      isCollectionStatsLoading: false,\r\n      setIsCollectionStatsLoading: (isCollectionStatsLoading) =>\r\n        set(() => {\r\n          return { isCollectionStatsLoading }\r\n        }),\r\n    }),\r\n    { name: 'useIsCollectionLoading' }\r\n  )\r\n)\r\n","import { BigNumber } from '@ethersproject/bignumber'\r\nimport { BagItem, BagItemStatus, GenieAsset, Markets, UpdatedGenieAsset } from 'nft/types'\r\n\r\nexport const calcPoolPrice = (asset: GenieAsset, position = 0) => {\r\n  let amountToBuy: BigNumber = BigNumber.from(0)\r\n  let marginalBuy: BigNumber = BigNumber.from(0)\r\n  const nft = asset.sellorders[0]\r\n  const decimals = BigNumber.from(1).mul(10).pow(18)\r\n  const ammFee = nft.ammFeePercent ? (100 + nft.ammFeePercent) * 100 : 110 * 100\r\n\r\n  if (asset.marketplace === Markets.NFTX) {\r\n    const sixteenmul = BigNumber.from(1).mul(10).pow(16)\r\n    amountToBuy = BigNumber.from(ammFee)\r\n      .div(100)\r\n      .mul(position + 1)\r\n    amountToBuy = amountToBuy.mul(sixteenmul)\r\n\r\n    marginalBuy = BigNumber.from(ammFee).div(100).mul(position)\r\n    marginalBuy = marginalBuy.mul(sixteenmul)\r\n  }\r\n  if (asset.marketplace === Markets.NFT20) {\r\n    amountToBuy = BigNumber.from(100).mul(position + 1)\r\n    amountToBuy = amountToBuy.mul(decimals)\r\n\r\n    marginalBuy = BigNumber.from(100).mul(position)\r\n    marginalBuy = marginalBuy.mul(decimals)\r\n  }\r\n\r\n  const ethReserves = BigNumber.from(nft.ethReserves?.toLocaleString('fullwide', { useGrouping: false }))\r\n  const tokenReserves = BigNumber.from(nft.tokenReserves?.toLocaleString('fullwide', { useGrouping: false }))\r\n  const numerator = ethReserves.mul(amountToBuy).mul(1000)\r\n  const denominator = tokenReserves.sub(amountToBuy).mul(997)\r\n\r\n  const marginalnumerator = ethReserves.mul(marginalBuy).mul(1000)\r\n  const marginaldenominator = tokenReserves.sub(marginalBuy).mul(997)\r\n\r\n  let price = numerator.div(denominator)\r\n  const marginalprice = marginalnumerator.div(marginaldenominator)\r\n\r\n  price = price.sub(marginalprice)\r\n  price = price.mul(101).div(100)\r\n\r\n  return price.toString()\r\n}\r\n\r\nexport const calcAvgGroupPoolPrice = (asset: GenieAsset, numberOfAssets: number) => {\r\n  let total = BigNumber.from(0)\r\n\r\n  for (let i = 0; i < numberOfAssets; i++) {\r\n    const price = BigNumber.from(calcPoolPrice(asset, i))\r\n    total = total.add(price)\r\n  }\r\n\r\n  return total.div(numberOfAssets).toString()\r\n}\r\n\r\nexport const recalculateBagUsingPooledAssets = (uncheckedItemsInBag: BagItem[]) => {\r\n  if (\r\n    !uncheckedItemsInBag.some(\r\n      (item) => item.asset.marketplace === Markets.NFTX || item.asset.marketplace === Markets.NFT20\r\n    ) ||\r\n    uncheckedItemsInBag.every(\r\n      (item) => item.status === BagItemStatus.REVIEWED || item.status === BagItemStatus.REVIEWING_PRICE_CHANGE\r\n    )\r\n  )\r\n    return uncheckedItemsInBag\r\n\r\n  const isPooledMarket = (market: Markets) => market === Markets.NFTX || market === Markets.NFT20\r\n\r\n  const itemsInBag = [...uncheckedItemsInBag]\r\n  const possibleMarkets = itemsInBag.reduce((markets, item) => {\r\n    const asset = item.asset\r\n    const market = asset.marketplace\r\n    if (!isPooledMarket(market)) return markets\r\n\r\n    const key = asset.address + asset.marketplace\r\n    if (Object.keys(markets).includes(key)) {\r\n      markets[key].push(asset.tokenId)\r\n    } else {\r\n      markets[key] = [asset.tokenId]\r\n    }\r\n    return markets\r\n  }, {} as { [key: string]: [string] })\r\n\r\n  const updatedPriceMarkets = itemsInBag.reduce((markets, item) => {\r\n    const asset = item.asset\r\n    const market = asset.marketplace\r\n    if (!asset.updatedPriceInfo) return markets\r\n    if (!isPooledMarket(market)) return markets\r\n\r\n    const key = asset.address + asset.marketplace\r\n    if (Object.keys(markets).includes(key)) {\r\n      markets[key] = [markets[key][0] + 1, asset]\r\n    } else {\r\n      markets[key] = [1, asset]\r\n    }\r\n    return markets\r\n  }, {} as { [key: string]: [number, UpdatedGenieAsset] })\r\n\r\n  const calculatedAvgPoolPrices = Object.keys(updatedPriceMarkets).reduce((prices, key) => {\r\n    prices[key] = calcAvgGroupPoolPrice(updatedPriceMarkets[key][1], updatedPriceMarkets[key][0])\r\n    return prices\r\n  }, {} as { [key: string]: string })\r\n\r\n  itemsInBag.forEach((item) => {\r\n    if (isPooledMarket(item.asset.marketplace)) {\r\n      const asset = item.asset\r\n      const isPriceChangedAsset = !!asset.updatedPriceInfo\r\n\r\n      const calculatedPrice = isPriceChangedAsset\r\n        ? calculatedAvgPoolPrices[asset.address + asset.marketplace]\r\n        : calcPoolPrice(asset, possibleMarkets[asset.address + asset.marketplace].indexOf(item.asset.tokenId))\r\n\r\n      if (isPriceChangedAsset && item.asset.updatedPriceInfo)\r\n        item.asset.updatedPriceInfo.ETHPrice = item.asset.updatedPriceInfo.basePrice = calculatedPrice\r\n      else item.asset.currentEthPrice = item.asset.priceInfo.ETHPrice = calculatedPrice\r\n    }\r\n  })\r\n\r\n  return itemsInBag\r\n}\r\n","// change this if we change the fallback provider\r\nexport const fallbackProvider = 'PopRank'\r\nexport const shouldLinkToFallbackProvider = false\r\nexport const fallbackProviderLogo = '/nft/logos/poprank.png'\r\n\r\n/**\r\n * Add provider mappings based on provider name returned from the backend here\r\n */\r\nexport const rarityProviderLogo: { [key: string]: string } = {\r\n  'Rarity Sniper': '/nft/svgs/gem.svg',\r\n  Genie: fallbackProviderLogo,\r\n}\r\n\r\nexport const getRarityProviderLogo = (source?: string): string | undefined => {\r\n  if (!source) return undefined\r\n  return rarityProviderLogo[source] || fallbackProviderLogo\r\n}\r\n","import { DetailsOrigin, GenieAsset, WalletAsset } from 'nft/types'\r\n\r\nexport function getRarityStatus(\r\n  rarityStatusCache: Map<string, boolean>,\r\n  id: string,\r\n  assets?: (GenieAsset | undefined)[]\r\n) {\r\n  if (rarityStatusCache.has(id)) {\r\n    return rarityStatusCache.get(id)\r\n  }\r\n  const hasRarity = assets && Array.from(assets).reduce((reducer, asset) => !!(reducer || asset?.rarity), false)\r\n\r\n  if (hasRarity) {\r\n    rarityStatusCache.set(id, hasRarity)\r\n  }\r\n\r\n  return hasRarity\r\n}\r\n\r\nexport const getAssetHref = (asset: GenieAsset | WalletAsset, origin?: DetailsOrigin) => {\r\n  const address =\r\n    (asset as GenieAsset).address !== undefined\r\n      ? (asset as GenieAsset).address\r\n      : (asset as WalletAsset).asset_contract.address\r\n  return `/nfts/asset/${address}/${asset.tokenId}${origin ? `?origin=${origin}` : ''}`\r\n}\r\n\r\nexport const getMarketplaceIcon = (marketplace: string) => {\r\n  return `/nft/svgs/marketplaces/${marketplace}.svg`\r\n}\r\n","import { BigNumber } from '@ethersproject/bignumber'\r\nimport { formatEther } from '@ethersproject/units'\r\nimport { ActivityEvent, GenieAsset } from 'nft/types'\r\n\r\nexport const buildActivityAsset = (event: ActivityEvent, collectionName: string, ethPriceInUSD: number): GenieAsset => {\r\n  const assetUsdPrice = event.price\r\n    ? formatEther(\r\n        BigNumber.from(event.price)\r\n          .mul(BigNumber.from(Math.trunc(ethPriceInUSD * 100)))\r\n          .div(100)\r\n      )\r\n    : '0'\r\n\r\n  return {\r\n    address: event.collectionAddress,\r\n    collectionName,\r\n    currentEthPrice: event.price,\r\n    imageUrl: event.tokenMetadata?.imageUrl,\r\n    marketplace: event.marketplace,\r\n    name: event.tokenMetadata?.name,\r\n    tokenId: event.tokenId,\r\n    openseaSusFlag: event.tokenMetadata?.suspiciousFlag,\r\n    smallImageUrl: event.tokenMetadata?.smallImageUrl,\r\n    collectionSymbol: event.symbol,\r\n    currentUsdPrice: assetUsdPrice,\r\n    priceInfo: {\r\n      USDPrice: assetUsdPrice,\r\n      ETHPrice: event.price,\r\n      basePrice: event.price,\r\n      baseAsset: 'ETH',\r\n    },\r\n    tokenType: event.tokenMetadata?.standard,\r\n  } as GenieAsset\r\n}\r\n","export const buildSellObject = (amount: string) => {\r\n  return {\r\n    address: '0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee',\r\n    amount,\r\n    decimals: 18,\r\n    name: 'Ethereum',\r\n    priceInfo: {\r\n      baseAsset: 'ETH',\r\n      basePrice: amount,\r\n      ETHPrice: amount,\r\n    },\r\n    symbol: 'ETH',\r\n    tokenId: 'ETH',\r\n    tokenType: 'ERC20',\r\n  }\r\n}\r\n","const set = new Set<string>(['mp3', 'wav'])\r\n\r\nexport const isAudio = (file: string) => {\r\n  if (!file) return false\r\n\r\n  const fileType = file.substring(file.lastIndexOf('.') + 1)\r\n\r\n  return set.has(fileType)\r\n}\r\n","import extensions from 'video-extensions'\r\n\r\nexport const isVideo = (path: string | null) => extensions.find((ext) => path?.endsWith(`.${ext}`)) !== undefined\r\n","import { BigNumber } from '@ethersproject/bignumber'\r\nimport { UpdatedGenieAsset } from 'nft/types'\r\n\r\nexport const updatedAssetPriceDifference = (asset: UpdatedGenieAsset) => {\r\n  if (!asset.updatedPriceInfo) return BigNumber.from(0)\r\n  return BigNumber.from(asset.updatedPriceInfo.ETHPrice).sub(BigNumber.from(asset.priceInfo.ETHPrice))\r\n}\r\n\r\nexport const sortUpdatedAssets = (x: UpdatedGenieAsset, y: UpdatedGenieAsset) => {\r\n  return updatedAssetPriceDifference(x).gt(updatedAssetPriceDifference(y)) ? -1 : 1\r\n}\r\n\r\nexport const getTotalNftValue = (nfts: UpdatedGenieAsset[]): BigNumber => {\r\n  return (\r\n    nfts &&\r\n    nfts.reduce(\r\n      (ethTotal, nft) =>\r\n        ethTotal.add(BigNumber.from(nft.updatedPriceInfo ? nft.updatedPriceInfo.ETHPrice : nft.priceInfo.ETHPrice)),\r\n      BigNumber.from(0)\r\n    )\r\n  )\r\n}\r\n","import { BuyItem, GenieAsset, PriceInfo, RoutingItem, UpdatedGenieAsset } from 'nft/types'\r\nimport { formatWeiToDecimal } from 'nft/utils/currency'\r\n\r\nconst isTheSame = (item: GenieAsset, routeAsset: BuyItem | PriceInfo) => {\r\n  // if route asset has id, match by id\r\n  if ('id' in routeAsset && routeAsset.id) {\r\n    return routeAsset.id === item.id\r\n  } else {\r\n    return (\r\n      'address' in routeAsset &&\r\n      routeAsset.address.toLowerCase() === item.address.toLowerCase() &&\r\n      routeAsset.tokenId === item.tokenId\r\n    )\r\n  }\r\n}\r\n\r\nconst isPriceDiff = (oldPrice: string, newPrice: string) => {\r\n  return formatWeiToDecimal(oldPrice) !== formatWeiToDecimal(newPrice)\r\n}\r\n\r\nexport const combineBuyItemsWithTxRoute = (\r\n  items: UpdatedGenieAsset[],\r\n  txRoute?: RoutingItem[]\r\n): UpdatedGenieAsset[] => {\r\n  return items.map((item) => {\r\n    const route = txRoute && txRoute.find((r) => r.action === 'Buy' && isTheSame(item, r.assetOut))\r\n\r\n    // if the item is not found in txRoute, it means it's no longer for sale\r\n    if (txRoute && !route) {\r\n      return {\r\n        ...item,\r\n        isUnavailable: true,\r\n      }\r\n    }\r\n\r\n    const newPriceInfo = item.updatedPriceInfo ? item.updatedPriceInfo : item.priceInfo\r\n\r\n    // if the price changed\r\n    if (\r\n      route &&\r\n      'priceInfo' in route.assetOut &&\r\n      isPriceDiff(newPriceInfo.basePrice, route.assetOut.priceInfo.basePrice)\r\n    ) {\r\n      return {\r\n        ...item,\r\n        updatedPriceInfo: route.assetOut.priceInfo,\r\n      }\r\n    }\r\n\r\n    return {\r\n      ...item,\r\n      priceInfo: newPriceInfo,\r\n      updatedPriceInfo: undefined,\r\n      orderSource: route && 'orderSource' in route.assetOut ? route.assetOut.orderSource : undefined,\r\n    }\r\n  })\r\n}\r\n"],"sourceRoot":""}